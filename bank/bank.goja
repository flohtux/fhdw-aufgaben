model bank {
<<<<<<< HEAD

server Server {
one-to-one (server-only access) Service service;
}
abstract server Service{
String changePassword(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
observe Bank ** banks;
void createBank(String name);
void changeName(Bank bank, String name@@Name);
}
singleton BankCreator {
server-only Integer lastBankNumber;
active Bank createBank(String name);
}
server BankService extends Service {
skip-view prior final one-to-one (server-only bankServices) Bank bank;
void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
void closeAccount@@Konto_schließen(Account acc);
void closeAccount@@Konto_übertragen(Account acc, Account transAcc);
}
class Bank {
indexed Integer bankNumber@@BLZ;
indexed prior String name@@Name;
server-only Integer lastAccountNumber##lstAccNo;
server-only one-to-one (server-only bank) Account ** Integer ** accounts;
transient Account ** currentAccounts;
active event void changeName(String name);
active void createAccount(CurrencySUBTYPEName currencyType);
}
server AccountService extends Service {
prior final one-to-one (server-only accountService) server-only Account account;
void createTransfer@@Neue_Überweisung();
}
class Account {
prior Integer accountNumber;
Amount amount@@Geldmenge;
AccountLimitState limits;
}

class Amount {
Money balance;
Currency currency;
}

class Money {
Integer balance;
}

abstract class TransactionFee(FixTransactionFee,ProcentualFee) {

}
class MixedFee extends TransactionFee{
FixTransactionFee fix;
ProcentualFee procentual;
Integer limit;
}
string-factory abstract class Currency (Euro, Dollar){}
abstract class AccountLimitState(NoLimitState,MinLimitState,MaxLimitState){
void checkLimit(Amount transactionValue);//TODO return boolean!!
=======
	
server Server {
	one-to-one (server-only access) Service service;
}
abstract server Service{
	String changePassword(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
	observe Bank ** banks;
	void createBank(String name);
	void changeName(Bank bank, String name@@Name);
}
singleton BankCreator {
	server-only Integer lastBankNumber;
	active Bank createBank(String name);
}
server BankService extends Service {
	skip-view prior final one-to-one (server-only bankServices) Bank bank;
	void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
	void closeAccount@@Konto_schließen(Account acc);
	void closeAccount@@Konto_übertragen(Account acc, Account transAcc);
}
class Bank {
	indexed Integer bankNumber@@BLZ;
	indexed prior String name@@Name;
	server-only Integer lastAccountNumber##lstAccNo;
	server-only one-to-one (server-only bank) Account ** Integer ** accounts;
	transient Account ** currentAccounts;	
	active event void changeName(String name);
	active void createAccount(CurrencySUBTYPEName currencyType);
}
server AccountService extends Service {
	prior final one-to-one (server-only accountService) server-only Account account;
	void createTransfer@@Neue_Überweisung();
}
class Account {
	prior Integer accountNumber;
	Amount amount@@Geldmenge;
	AccountLimitState limits;
}

class Amount {
	Money balance;
	Currency currency;
}

class Money {
	Integer balance;
}

abstract class TransactionFee(FixTransactionFee,ProcentualFee) {
	
}
class MixedFee extends TransactionFee{
	FixTransactionFee fix;
	ProcentualFee procentual;
	Integer limit;
}
string-factory abstract class Currency (Euro, Dollar){}
abstract class AccountLimitState(NoLimitState,MinLimitState,MaxLimitState){
	void checkLimit(Amount transactionValue);//TODO return boolean!!
>>>>>>> refs/remotes/origin/master
}


exception PasswordException {}
}
