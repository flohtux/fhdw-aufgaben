model bank {
	
server Server {
	one-to-one (server-only access) Service service;
}
abstract server Service{
	String changePassword(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
	observe Bank ** banks;
	void createBank(String name);
	void changeName(Bank bank, String name@@Name);
}
singleton BankCreator {
	server-only Integer lastBankNumber;
	active Bank createBank(String name);
}
server BankService extends Service {
	skip-view prior final one-to-one (server-only bankServices) Bank bank;
	void createAccount();
}
class Bank {
	indexed Integer bankNumber@@BLZ;
	indexed prior String name@@Name;
	server-only Integer lastAccountNumber##lstAccNo;
	server-only one-to-one (server-only bank) Account ** Integer ** accounts;
	transient Account ** currentAccounts;	
	active event void changeName(String name);
	active void createAccount();
}
server AccountService extends Service {
	prior final one-to-one (server-only accountService) server-only Account account;
}
class Account {
	prior Integer AccountNumber;
}
string-factory abstract class Currency (Euro, Dollar){}
exception PasswordException {}
}