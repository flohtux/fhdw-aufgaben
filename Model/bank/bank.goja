model bank {

server Server {
	one-to-one (server-only access) Service service;
}
abstract server Service{
	String changePassword@@Passwort_ändern(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
	observe CurrencyManager currencyManager;
	observe BankPx ** banks;
	void createBank@@Bank_erstellen(String name);
	void changeName@@Namen_ändern(Bank bank, String name@@Name);
	void changeCurrencyRateGUI@@Wechselkurs_festlegen(CurrencySUBTYPEName currency, Fraction rate);
	Bank searchBankByBankNumber(Integer bankNum) throws InvalidBankNumberException;
}

singleton CurrencyManager@@Zentralbank {
	Amount** Currency** exchangeRates;
	Money** currencyStock;
	Money translateMoneyWithoutChanging(Money money, Currency target);
	Money translateMoney(Money money, Currency target);
	Amount translateMoneyToReferenceWithoutChanging(Money money);
	Amount calculateExchangeRateCompensationReferenceAmount();
	void shiftCurrencyStock(Money variance);

	void changeExchangeRate(Currency currency, Amount newRate);
	Amount fetchExchangeRate(Currency currency);
}

singleton BankCreator {
	server-only Integer lastBankNumber;
	active Bank createBank(String name, Administrator administrator);
}
server BankService extends Service {
	skip-view prior final one-to-one (server-only bankServices) Bank bank;
	void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
	void closeAccount@@Konto_schließen(Account acc) throws CloseAccountNoPossibleException;
	void closeAccount@@Konto_übertragen(Account acc, Account transAcc{bank;currentAccounts}) throws ExecuteException, CloseAccountNoPossibleException;
	void changeMaxLimit@@Obergrenze_festlegen(LimitAccount limit,Fraction amount@@Obergrenze);
	void changeMinLimit@@Untergrenze_festlegen(LimitAccount limit, Fraction amount@@Untergrenze);
	void resetMaxLimit@@Obergrenze_aufheben(LimitAccount limit);
	void resetMinLimit@@Untergrenze_aufheben(LimitAccount limit);
	void findAccount@@Konto_finden(Integer accountNumber) throws UserException;
	void changeTransactionFee@@Gebühren_ändern(TransactionFeeSUBTYPEName newFee@@Gebührentyp, Fraction fix@@fixe_Gebühren, CurrencySUBTYPEName fixCurrency, Fraction limit@@Grenze, CurrencySUBTYPEName limitCurrency, Fraction procentual@@variable_Gebühren);
	void changeInteralFee@@Interne_Gebühren_ändern(InternalFee fee, Fraction procentual@@Prozent);
}
class Bank {
	indexed Integer bankNumber@@BLZ;
	indexed prior String name@@Name;
	server-only Integer lastAccountNumber##lstAccNo;
	TransactionFee fee;
	InternalFee internalFee;
	prior Account ownAccount;
	server-only one-to-one (server-only bank) Account ** Integer ** accounts;
	symmetric (server-only banks) prior server-only Administrator administrator;
	transient Account ** currentAccounts;
	active event void changeName(String name);
	active void createAccount(CurrencySUBTYPEName currencyType);
	void sendTransfer(DebitTransfer debitTransfer) throws ExecuteException;
	void receiveTransfer(DebitTransfer debitTransfer) throws InvalidAccountNumberException, DebitException;
	void changeTransactionFeeToFix(Money fix);
	void changeTransactionFeeToProcentual(Percent procentual);
	void changeTransactionFeeToMixed(Money fix, Percent procentual, Money limit);
	void changeInternalFee(Percent procentual);
	Account searchAccountByAccNumber(Integer accNum) throws InvalidAccountNumberException;
}

class BankPx {
	server-only prior Bank bank;
}

server AccountService extends Service {
	prior final one-to-one (server-only  accountService) skip-view Account account;
	final one-to-one(server-only accountService) no-view EventWrapper eventhandle;
	observe DebitTransferSuccessful successful;
	observe DebitTransferNotExecuted notExecuted;
	observe DebitTransferTemplate template;
	FeeWrapper feeWrapper;
	void createTransfer@@Neue_Überweisung();
	void createDebit@@Neue_Lastschrift();
	void createTemplate@@Neue_Vorlage(DebitTransferTransactionSUBTYPEName type@@Buchungstyp);
	void createTransaction@@Neue_Transaktion();
	void createTrigger@@Neue_Folgebuchung(String name, DebitTransferTransactionSUBTYPEName type);
	void enable(Trigger t checked) throws NoRuleDefinitionException;
	void disable(Trigger t checked);
	void createNewRule(Trigger t, RuleSUBTYPEName type) throws DoubleRuleDefinitionException;
	void executeTransfer@@Überweisung_abschicken(DebitTransferTransaction debitTransfer checked) throws ExecuteException, NoPermissionToExecuteDebitTransferException;
	active void useTemplate@@Vorlage_verwenden(DebitTransferTransaction debitTransferTransaction##dbtTrafTran checked);
	void changeReceiverBank@@Empfänger_Bank_ändern(DebitTransfer trans checked, Integer receiverBankNumber);
	void changeReceiverAccount@@Empfänger_Konto_ändern(DebitTransfer trans checked, Integer receiverAccNumber);
	void changeMoney@@Überweisungsbetrag_ändern(DebitTransfer trans checked, Fraction newAmount);
	void changeSubject@@Betreff_ändern(DebitTransfer trans checked, String subject);
	void changeCurrency@@Währung_ändern(DebitTransfer trans checked, CurrencySUBTYPEName currency);
	void createDebitGrant@@Neue_Erlaubnis_erteilen(DebitGrantListe debitGrantList,Integer receiverBankNumber,Integer receiverAccNumber, LimitTypeSUBTYPEName limitType, Fraction amount, CurrencySUBTYPEName cur) throws InvalidAccountNumberException, InvalidBankNumberException, GrantAlreadyGivenException;
	void addToTransaction@@Buchung_zu_Transaktion_hinzufügen(Transaction transaction checked,DebitTransfer ** debitTransfer {notExecuted;notExecuteds});
	void addToTransactionTemplate@@Vorlagebuchung_zu_Transaktion_hinzufügen(Transaction transaction checked,DebitTransfer ** debitTransfer {template;templates});
	void removeFromTransaction@@Buchung_aus_Transaktion_entfernen(Transaction transaction checked, DebitTransfer ** debitTransfer{;transaction;debitTransfer;debitTransfers});
	void remove@@Erlaubnis_entziehen(DebitGrant grant);
}

class FeeWrapper {
	prior TransactionFee fee;
	prior InternalFee internalFee;
}

class EventWrapper {
	void reactOnEvent(extern model.meta.DebitTransferTransactionMssgs ev);
}

class DebitTransferSuccessful##DbtTrnSucc {
	DebitTransferTransaction ** successfuls;
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class DebitTransferNotExecuted##DbTrNtExec {
	DebitTransferTransaction ** notExecuteds;	
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class DebitTransferTemplate##DbTrNtTmpl {
	DebitTransferTransaction ** templates;	
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class Account {
	prior indexed Integer accountNumber@@Kontonummer;
	prior one-to-one (no-view account) Money money@@Geldmenge;
	one-to-one (no-view account) LimitAccount limit;
	observe no-view DebitTransferTransaction ** debitTransferTransactions##DebTrfTrans;
	observe DebitGrantListe grantedDebitGrant##GrntdGrnt;
	observe DebitGrantListe receivedDebitGrant##RcvdGrnt;
	observe TriggerListe triggerListe;
	event void remove(AccountPx acc, DebitGrantListe list);

	Transfer createTransfer();
	Trigger createTrigger(String name, DebitTransferTransaction dtt);
	active void changeReceiverBank(DebitTransfer trans, Integer receiverBankNumber);
	active void changeReceiverAccount##chngRcvAcc(DebitTransfer trans, Integer receiverAccountNumber##recAccNr);
	active void changeMoney(DebitTransfer trans, Fraction newAmount);
	active void changeCurrency(DebitTransfer trans, Currency currency);
	
	Debit createDebit();
	active event void createDebitGrant(Account receiver, LimitType limit) throws GrantAlreadyGivenException; 

	DebitTransferTransaction createTemplate(DebitTransferTransactionSUBTYPEName type);
	Transaction createTransaction();

	void addToTransaction(Transaction transaction,DebitTransfer ** debitTransfer);
	void addToTransactionTemplate(Transaction transaction,DebitTransfer ** debitTransfer);

	//Trigger

}

class AccountPx {
	server-only prior Account account;
}

class TriggerListe {
	Trigger ** triggers;
	event void remove(Trigger t);
	event void add(Trigger t);
}

class DebitGrantListe {
	DebitGrant ** debitGrants;
	event void createDebitGrant(AccountPx receiver, LimitType limit) throws GrantAlreadyGivenException;
	void checkGrantGiven(AccountPx acc) throws GrantAlreadyGivenException;
	event void remove(AccountPx acc);
}

class Money {
	skip-view prior Amount amount;
	skip-view prior Currency currency;
	Money add(Money money);
	Money subtract(Money money) throws LimitViolatedException;
	Money multiply (Fraction factor);
	BooleanValue greater(Money money);
	BooleanValue greaterOrEqual(Money money);
	BooleanValue equalsValue(Money money);
}

class Amount {
	prior Fraction balance;
	Amount add(Amount a);
	Amount subtract(Amount a);
}

class LimitAccount {
	no-view LimitType minLimit;
	no-view LimitType maxLimit;
	void checkLimit(Money money) throws LimitViolatedException;
}

abstract class BooleanValue(TrueValue,FalseValue){
	extern boolean isTrue();
}

abstract string-factory class LimitType(NoLimit) {
	void checkLimit(Money money) throws LimitViolatedException;
}
class Limit extends LimitType{
	prior skip-view Money money;
}

string-factory abstract class TransactionFee{}

class MixedFee extends TransactionFee{
	prior FixTransactionFee fix;
	prior ProcentualFee procentual;
	prior Money limit;
}
class ProcentualFee extends TransactionFee{
	prior no-view Percent percent;
}
class FixTransactionFee extends TransactionFee {
	prior no-view Money value;
}

class InternalFee {
 	prior no-view Percent percent;
}
class Percent {
	prior Fraction value;
}

string-factory abstract class Currency (Euro, Dollar, Yen, Pfund, Franken){}

string-factory abstract class DebitTransferTransaction##DebiTrfTran {
	active event DebitTransferTransaction execute()  throws ExecuteException;
	Timestamp timestamp@@Zeitstempel;
	String subject@@Betreff;
	no-view	Account sender;
	one-to-one (no-view debitTransfer) DebitTransferState state;
	DebitTransferTransaction copy();
	event DebitTransferDoubleState changeState(DebitTransferState newState);
}

abstract class DebitTransfer extends DebitTransferTransaction{
	Integer receiverAccountNumber##recaccno@@Empfänger_Konto;
	Integer receiverBankNumber@@Empfänger_Bank;	
	no-view Money money@@Betrag;
	no-view one-to-one (no-view debitTransfer) StornoState stornoState;
	abstract Money fetchRealMoney();
  event void changeReceiverBank(Integer receiverBankNumber);
	event void changeReceiverAccount(Integer receiverAccountNumber);
	event void changeMoney(Fraction newAmount);
	event void changeCurrency(Currency currency);
}

class Transfer extends DebitTransfer {

}
class Debit extends DebitTransfer {}

class Transaction extends DebitTransferTransaction {
	skip-view DebitTransferListe debitTransfer;
	void addToTransaction(DebitTransfer ** debitTransfer);
	void removeFromTransaction(DebitTransfer ** debitTransfer);
}

class DebitTransferListe##DebTransLst {
	DebitTransfer ** debitTransfers;
}

class DebitGrant {
	prior AccountPx permittedAccount;
	prior LimitType limits;
}

class Trigger{
	prior String name;
	one-to-one (no-view master) TriggerState state;
	DebitTransferTransaction action;
	Rule ** rules;
	void enable() throws NoRuleDefinitionException;
	void disable();
	void addRule(Rule rule) throws DoubleRuleDefinitionException;
}

abstract class TriggerState (EnabledState, DisabledState) {}

string-factory abstract class Rule{
	BooleanValue check(DebitTransfer debitTransfer);
}

class MoneyRule extends Rule{
	no-view prior Currency currency;
	LimitAccount limitAccount;
}

class SubjectRule extends Rule{
	String subject;
}

class IncomingAccountRule##IncAccRule extends Rule{
	Integer accountNumber;
	Integer bankNumber;
}

class DebitTransferDoubleState##DebTraStaDo {
	prior DebitTransferState debitTransferStateOld##dbtrstold;
	prior DebitTransferState debitTransferStateNew##dbtrstNew;
}

abstract class DebitTransferState##DebiTraStat{
	BooleanValue isExecutable();
	BooleanValue isTransaction();
	void changeState(DebitTransferState newState);
	void removeDebitTransferFromList();
	void addDebitTransferFromList(DebitTransferState state);
}

class SuccessfulState extends DebitTransferState {}
class NotSuccessfulState##NotSucState extends DebitTransferState {}
class TemplateState extends DebitTransferState {}
class ExecutedState extends DebitTransferState {}
class NotExecutedState extends DebitTransferState {}
class NotExecutableState extends DebitTransferState {}

abstract class StornoState(SuccessfulStornoState##SucStoSta,NotSuccessfulStornoState##NoSucStoSta,RequestState,NoRequestState){}

exception PasswordException {}
exception InvalidBankNumberException extends ExecuteException{}
exception InvalidAccountNumberException extends ExecuteException{}
exception LimitViolatedException extends DebitException{}
exception NoPermissionToExecuteDebitTransferException extends ExecuteException{}
exception CloseAccountNoPossibleException{}
exception NoAccountsFound{}
exception GrantAlreadyGivenException{}
exception DebitNotGrantedException extends DebitException{}
exception RuleNotMatchedException {}
exception DoubleRuleDefinitionException {}
exception NoRuleDefinitionException {}

abstract exception DebitException extends ExecuteException{}
abstract exception ExecuteException{}

}



