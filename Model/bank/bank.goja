model bank {

server Server {
one-to-one (server-only access) Service service;
}
abstract server Service{
  String changePassword(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
  observe Bank ** banks;
  void createBank(String name);
  void changeName(Bank bank, String name@@Name);
}
singleton BankCreator {
  server-only Integer lastBankNumber;
  active Bank createBank(String name);
}
server BankService extends Service {
  skip-view prior final one-to-one (server-only bankServices) Bank bank;
  void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
  void closeAccount@@Konto_schließen(Account acc);
void closeAccount@@Konto_übertragen(Account acc, Account transAcc);
}
class Bank {
indexed Integer bankNumber@@BLZ;
indexed prior String name@@Name;
server-only Integer lastAccountNumber##lstAccNo;
TransactionFee fee;
server-only one-to-one (server-only bank) Account ** Integer ** accounts;
transient Account ** currentAccounts;
active event void changeName(String name);
active void createAccount(CurrencySUBTYPEName currencyType);
}
server AccountService extends Service {
prior final one-to-one (server-only accountService) server-only Account account;
void createTransfer@@Neue_Überweisung(Trancaction transaction);
}
class Account {
prior Integer accountNumber;
Money money@@Geldmenge;
AccountLimitState firstLimit;
AccountLimitState secondLimit;
void createTransfer(Trancaction transaction);
}

class Money {
prior Amount balance;
prior Currency currency;
}

class Amount {
prior Fraction balance;
}

abstract class TransactionFee(FixTransactionFee,ProcentualFee) {

}
class MixedFee extends TransactionFee{
FixTransactionFee fix;
ProcentualFee procentual;
prior Integer limit;
}
string-factory abstract class Currency (Euro, Dollar){}

abstract class AccountLimitState(NoLimitState){
void checkLimit(Money transactionValue);//TODO return boolean!!
}
abstract class LimitState(MinLimitState,MaxLimitState) extends AccountLimitState {
prior Amount balance;
}
abstract class DebitNoteTransaction##DebitTrans(DebitNote,Trancaction) {
prior Integer bankNumber;
  prior Integer accountNumber;
prior Money money;
}


exception PasswordException {}
}