model bank {

server Server {
one-to-one (server-only access) Service service;
}
abstract server Service{
  String changePassword(String newPassword1 PASSWORD, String newPassword2 PASSWORD) throws PasswordException;
}
server Administrator extends Service {
  observe Bank ** banks;
	//hashmap exchange;
  void createBank(String name);
	Money translateMoney(Money money, Currency currency);
  void changeName(Bank bank, String name@@Name);
}
singleton BankCreator {
  server-only Integer lastBankNumber;
  active Bank createBank(String name, Administrator administrator);
}
server BankService extends Service {
  skip-view prior final one-to-one (server-only bankServices) Bank bank;
  void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
  void closeAccount@@Konto_schließen(Account acc);
	void closeAccount@@Konto_übertragen(Account acc, Account transAcc);
	void changeMaxLimit@@Obergrenze_festlegen(Account acc,Fraction amount);
}
class Bank {
indexed Integer bankNumber@@BLZ;
indexed prior String name@@Name;
server-only Integer lastAccountNumber##lstAccNo;
TransactionFee fee;
InternalFee internalFee;
prior Account ownAccount;
server-only one-to-one (server-only bank) Account ** Integer ** accounts;
symmetric (server-only banks) prior server-only Administrator administrator;
transient Account ** currentAccounts;
active event void changeName(String name);
active void createAccount(CurrencySUBTYPEName currencyType);
void sendTransfer(DebitNoteTransfer debitNoteTransfer) throws InvalidBankNumberException, InvalidAccountNumberException, LimitViolatedException;
void receiveTransfer(DebitNoteTransfer debitNoteTransfer) throws InvalidAccountNumberException, LimitViolatedException;
}
server AccountService extends Service {
prior final one-to-one (server-only  accountService) skip-view Account account;
void createTransfer@@Neue_Überweisung();
void executeTransfer@@Überweisung_abschicken(DebitNoteTransfer debitNoteTransfer) throws InvalidBankNumberException, InvalidAccountNumberException, LimitViolatedException;
void changeReceiverBank@@Empfänger_Bank_ändern(Transfer trans, Integer receiverBankNumber);
void changeReceiverAccount@@Empfänger_Konto_ändern(Transfer trans, Integer receiverAccNumber);
void changeMoney@@Überweisungsbetrag_ändern(Transfer trans, Fraction newAmount);
}
class Account {
prior Integer accountNumber;
prior one-to-one (no-view account) Money money@@Geldmenge;
one-to-one (no-view account) LimitAccount limit;
DebitNoteTransferTransaction ** debitNoteTransferTransactions##DebTrfTrans;
Transfer createTransfer();
void changeReceiverBank(Transfer trans, Integer receiverBankNumber);
void changeReceiverAccount(Transfer trans, Integer receiverAccountNumber);
void changeMoney(Transfer trans, Fraction newAmount);
}

class Money {
skip-view prior Amount amount;
skip-view prior Currency currency;
Money add(Money money);
Money subtract(Money money) throws LimitViolatedException;
Money multiply (Money money);
}

class Amount {
prior Fraction balance;
}

class LimitAccount {
	no-view LimitType minLimit;
	no-view LimitType maxLimit;
	void checkLimit(Money money) throws LimitViolatedException;
}

abstract class BooleanValue(TrueValue,FalseValue){}

abstract class LimitType(NoLimit) {}
class Limit extends LimitType{
	prior Money money;
}

abstract class TransactionFee{}

class MixedFee extends TransactionFee{
prior FixTransactionFee fix;
prior ProcentualFee procentual;
prior Fraction limit;
}
class ProcentualFee extends TransactionFee{
	prior Percent percent;
}
class FixTransactionFee extends TransactionFee {
	prior Money value;
}

class InternalFee {
 	prior Percent percent;
}
class Percent {
	prior Fraction value;
}

string-factory abstract class Currency (Euro, Dollar){}

abstract class DebitNoteTransferTransaction##DebiTrfTran {
	void execute()  throws InvalidBankNumberException, InvalidAccountNumberException, LimitViolatedException;
	//Timestamp timestamp;
}

abstract class DebitNoteTransfer(DebitNote) extends DebitNoteTransferTransaction{
	Integer receiverAccountNumber##recaccno@@Empfänger_Konto;
	Integer receiverBankNumber@@Empfänger_Bank;	
	no-view Account sender;
	no-view Money money@@Betrag;
	one-to-one (no-view debitNoteTransfer) DebitNoteTransferState state;
	no-view one-to-one (no-view debitNoteTransfer) StornoState stornoState;
}

class Transfer extends DebitNoteTransfer {}

class Transaction extends DebitNoteTransferTransaction {}

abstract class DebitNoteTransferState##DebiTraStat(SuccessfullState,NotSuccessfullState##NotSucState,TemplateState,ExecutedState,NotExecutetState,NotExecutableState){
}

abstract class StornoState(SuccessfullStornoState##SucStoSta,NotSuccessfullStorneState##NoSucStoSta,RequestState,NoRequestState){}

exception PasswordException {}
exception InvalidBankNumberException{}
exception InvalidAccountNumberException{}
exception LimitViolatedException{}
}

