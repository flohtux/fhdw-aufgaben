model bank {

server Server {
	one-to-one (server-only access) Service service;
}
abstract server Service{
	String changePassword@@Passwort_ändern(String newPassword1@@neues_Passwort PASSWORD, String newPassword2@@neues_Passwort_wiederholen PASSWORD) throws PasswordException;
}
server Administrator extends Service {
	observe CurrencyManager currencyManager;
	observe BankPx ** banks;
	void createBank@@Bank_erstellen(String name@@Name);
	void changeName@@Namen_ändern(Bank bank, String name@@Name);
	void changeCurrencyRateGUI@@Wechselkurs_festlegen(CurrencySUBTYPEName currencyType@@Währung, Fraction rate@@Kurs);
	Bank searchBankByBankNumber@@Bank_suchen(Integer bankNum@@BLZ) throws InvalidBankNumberException;
}

singleton CurrencyManager@@Zentralbank {
	Amount** Currency** exchangeRates;
	Money** currencyStock;
	Money translateMoneyWithoutChanging(Money money, Currency target);
	Money translateMoney(Money money, Currency target);
	Amount translateMoneyToReferenceWithoutChanging(Money money);
	Amount calculateExchangeRateCompensationReferenceAmount();
	void shiftCurrencyStock(Money variance);

	void changeExchangeRate(Currency currency, Amount newRate);
	Amount fetchExchangeRate(Currency currency);
}

singleton BankCreator {
	server-only Integer lastBankNumber;
	active Bank createBank(String name, Administrator administrator);
}
server BankService extends Service {
	skip-view prior final one-to-one (server-only bankServices) Bank bank;
	void createAccount@@Neues_Konto(CurrencySUBTYPEName currencyType@@Währung);
	void closeAccount@@Konto_schließen(Account acc) throws CloseAccountNoPossibleException;
	void closeAccount@@Konto_übertragen(Account acc, Account transAcc@@Zielkonto{bank;currentAccounts}) throws ExecuteException, CloseAccountNoPossibleException;
	void changeMaxLimit@@Obergrenze_festlegen(LimitAccount limit,Fraction amount@@Obergrenze) throws MaxLimitLowerThenMinLimitException;
	void changeMinLimit@@Untergrenze_festlegen(LimitAccount limit, Fraction amount@@Untergrenze) throws MinLimitHigherMaxLimitException;
	void resetMaxLimit@@Obergrenze_aufheben(LimitAccount limit checked);
	void resetMinLimit@@Untergrenze_aufheben(LimitAccount limit checked);

	void findAccount@@Konto_finden(Integer accountNumber@@Kontonummer) throws UserException;
	void changeTransactionFeeToFixFee@@Fixe_Gebühren(TransactionFee dummy, Fraction fix@@fixe_Gebühren, CurrencySUBTYPEName fixCurrency@@Währung) throws NoValidFeeValueException;
	void changeTransactionFeeToProcentualFee@@Prozentuale_Gebühren(TransactionFee dummy, Fraction procentual@@variable_Gebühren) throws NoValidPercentValueException;
	void changeTransactionFeeToMixedFee@@Gemischte_Gebühren(TransactionFee dummy,  Fraction fix@@fixe_Gebühren, CurrencySUBTYPEName fixCurrency@@Währung, Fraction limit@@Grenze, CurrencySUBTYPEName limitCurrency@@Währung, Fraction procentual@@variable_Gebühren) throws NoValidPercentValueException, NoValidFeeValueException;
	void changeInteralFee@@Interne_Gebühren_ändern(InternalFee fee, Fraction procentual@@Prozent) throws NoValidPercentValueException;
}
class Bank {
	indexed Integer bankNumber@@BLZ;
	indexed prior String name@@Name;
	server-only Integer lastAccountNumber##lstAccNo;
	final skip-view BankFees bankFees;
	prior BankOwnAccountPx ownAccount;
	server-only one-to-one (server-only bank) Account ** Integer ** accounts;
	symmetric (server-only banks) prior server-only Administrator administrator;
	transient Account ** currentAccounts;
	active event void changeName(String name);
	active void createAccount(CurrencySUBTYPEName currencyType);
	void sendTransfer(DebitTransfer debitTransfer) throws ExecuteException;
	void receiveTransfer(DebitTransfer debitTransfer) throws InvalidAccountNumberException, DebitException;
	void changeTransactionFeeToFix(Money fix) throws NoValidFeeValueException;
	void changeTransactionFeeToProcentual(Fraction procentual) throws NoValidPercentValueException; 
	void changeTransactionFeeToMixed(Money fix, Fraction procentual, Money limit) throws NoValidPercentValueException, NoValidFeeValueException;
	void changeInternalFee(Fraction procentual) throws NoValidPercentValueException;
	Account searchAccountByAccNumber(Integer accNum) throws InvalidAccountNumberException;
}

class BankPx {
	server-only prior Bank bank;
}

server AccountService extends Service {
	prior final one-to-one (server-only  accountService) skip-view Account account;
	final one-to-one(server-only accountService) no-view EventWrapper eventhandle;
	observe DebitTransferSuccessful successful;
	observe DebitTransferNotExecuted notExecuted;
	observe DebitTransferTemplate template;
	prior final observe BankFees bankFees;
	void createTransfer@@Neue_Überweisung();
	void createDebit@@Neue_Lastschrift();
	void createTemplate@@Neue_Vorlage(DebitTransferTransactionSUBTYPEName type@@Buchungstyp);
	void createTransaction@@Neue_Transaktion();

	void createTrigger@@Neue_Folgebuchung(String name@@Name, DebitTransferTransactionSUBTYPEName type@@Typ);
	void enable@@Aktivieren(Trigger t checked) throws NoRuleDefinitionException;
	void disable@@Deaktivieren(Trigger t checked);
	void createNewRule@@Neue_Regel_erstellen(Trigger t checked, RuleSUBTYPEName type@@Typ) throws DoubleRuleDefinitionException;
	void executeTransfer@@Überweisung_abschicken(DebitTransferTransaction debitTransfer checked) throws ExecuteException, NoPermissionToExecuteDebitTransferException;
	active void useTemplate@@Vorlage_verwenden(DebitTransferTransaction debitTransferTransaction##dbtTrafTran checked);
	no-view void changeReceiverBank(DebitTransfer trans checked, Integer receiverBankNumber);
	no-view void changeReceiverAccount(DebitTransfer trans checked, Integer receiverAccNumber);
	no-view void changeMoney(DebitTransfer trans checked, Fraction newAmount);
	no-view void changeSubject(DebitTransfer trans checked, String subject);
	no-view void changeCurrency(DebitTransfer trans checked, CurrencySUBTYPEName currency);
	void createDebitGrant@@Neue_Einzugsermächtigung(Integer receiverAccNumber@@Empfänger_Kontonummer, Integer receiverBankNumber@@Empfänger_BLZ, LimitTypeSUBTYPEName limitType@@Limit, Fraction amount@@Betrag, CurrencySUBTYPEName cur@@Währung) throws InvalidAccountNumberException, InvalidBankNumberException, GrantAlreadyGivenException;
	void addToTransaction@@Buchung_zu_Transaktion_hinzufügen(Transaction transaction checked,DebitTransfer ** debitTransfer {notExecuted;notExecuteds});
	void addToTransactionTemplate@@Vorlagebuchung_zu_Transaktion_hinzufügen(Transaction transaction checked,DebitTransfer ** debitTransfer {template;templates});
void addToTransactionTrigger@@Buchung_zu_Transaktion_hinzufügen(Transaction transaction checked, DebitTransferSUBTYPEName type@@Buchung);
	void removeFromTransaction@@Buchung_aus_Transaktion_entfernen(Transaction transaction checked, DebitTransfer ** debitTransfer{;transaction;debitTransfer;debitTransfers});
	void remove@@Erlaubnis_entziehen(DebitGrant grant);

	//Rules
	no-view void changeIncomingAccountRuleAccountNumber(IncomingAccountRule rule, Integer newAccNum);
	no-view void changeIncomingAccountRuleBankNumber(IncomingAccountRule rule, Integer newBankNum);
	no-view void changeSubjectRuleSubject(SubjectRule rule, String newSubject);
	no-view BooleanValue checkMoneyRuleMin(MoneyRule rule, Fraction minValue);
	no-view BooleanValue checkMoneyRuleMax(MoneyRule rule, Fraction maxValue);
	no-view void changeMoneyRuleMin(MoneyRule rule, Fraction minValue);
	no-view void changeMoneyRuleMax(MoneyRule rule, Fraction maxValue);

	//Kompensation
	void requestCompensation@@Rückbuchung_anfordern(DebitTransferTransaction dtr{successful;successfuls});
	void answerAccept@@annehmen(CompensationRequest a);
	void answerAcceptWithTrigger@@annehmen_wenn_auch_Folgebuchungen_kompensiert_werden_können(CompensationRequest a);
	void answerDecline@@ablehnen(CompensationRequest a);
}

class BankFees {
	prior TransactionFee fee;
	prior InternalFee internalFee;
	event void changeTransactionFee(TransactionFee newTransactionFee);
	event void changeInternalFee(InternalFee newInternalFee);
}

class EventWrapper {
	void reactOnEvent(extern model.meta.DebitTransferTransactionMssgs ev);
}

class DebitTransferSuccessful##DbtTrnSucc {
	DebitTransferTransaction ** successfuls;
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class DebitTransferNotExecuted##DbTrNtExec {
	DebitTransferTransaction ** notExecuteds;	
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class DebitTransferTemplate##DbTrNtTmpl {
	DebitTransferTransaction ** templates;	
	event void add(DebitTransferTransaction debitTransferTransaction);
	event void remove (DebitTransferTransaction debitTransferTransaction);
}

class Account {
	prior indexed Integer accountNumber@@Kontonummer;
	prior one-to-one (no-view account) Money money@@Geldmenge;
	one-to-one (no-view account) LimitAccount limit;
	observe no-view DebitTransferTransaction ** debitTransferTransactions##DebTrfTrans;
	observe DebitGrantListe grantedDebitGrant##GrntdGrnt;
	observe DebitGrantListe receivedDebitGrant##RcvdGrnt;
	observe TriggerListe triggerListe;
	observe AllCompensationListe allCompensation;
	event void remove(AccountPx acc, DebitGrantListe list);

	Transfer createTransfer();
	Trigger createTrigger(String name, DebitTransferTransaction dtt);
	active void changeReceiverBank(DebitTransfer trans, Integer receiverBankNumber);
	active void changeReceiverAccount##chngRcvAcc(DebitTransfer trans, Integer receiverAccountNumber##recAccNr);
	active void changeMoney(DebitTransfer trans, Fraction newAmount);
	active void changeCurrency(DebitTransfer trans, Currency currency);
	active void changeSubject(DebitTransfer trans, String subject);
	void executeTransfer(DebitTransferTransaction debitTransfer) throws ExecuteException, NoPermissionToExecuteDebitTransferException;
	
	Debit createDebit();
	active event void createDebitGrant(Account receiver, LimitType limit) throws GrantAlreadyGivenException; 

	DebitTransferTransaction createTemplate(DebitTransferTransactionSUBTYPEName type);
	Transaction createTransaction();

	void addToTransaction(Transaction transaction,DebitTransfer ** debitTransfer);
	void addToTransactionTemplate(Transaction transaction,DebitTransfer ** debitTransfer);
	void addToTransactionTrigger(Transaction transaction, DebitTransferSUBTYPEName type);

	void checkAllTriggers(DebitTransfer incomingDebitTransfer) throws ExecuteException;

	// Kompensation
	void requestCompensation@@Rückbuchung_anfordern(DebitTransferTransaction dtr);
	void answerAccept@@annehmen(CompensationRequest a);
	void answerAcceptWithTrigger@@annehmen_wenn_auch_Folgebuchungen_kompensiert_werden_können(CompensationRequest a);
	void answerDecline@@ablehnen(CompensationRequest a);
	Transaction findContainingTransaction(DebitTransferTransaction dt);
	void requestCompensationForTransaction(Transaction a);
	active void compensationDeclined##cmpDeclnd(Compensation compensation, String reason) throws CompensationAbortedException;
}

class AccountPx {
	server-only prior Account account;
}

class BankOwnAccountPx##BankOwAccPx {
	server-only prior Account account;
}

class TriggerListe {
	Trigger ** triggers;
	event void remove(Trigger t);
	event void add(Trigger t);
}


class AllCompensationListe##AllCmpLst {
	observe CompensationListe outgoingCompensations##outgngCmps;
	observe CompensationRequestListe pendingCompensationRequests##pndgCmp;
   event void signalChanges();
}


class CompensationListe {
	Compensation ** compensations;
	event void remove(Compensation t);
	event void add(Compensation t);
}

class CompensationRequestListe##CmpRqLst {
	CompensationRequest ** compensationrequests##rqsts;
	void remove(CompensationRequest t);
	event void add(CompensationRequest t);
}

class DebitGrantListe {
	DebitGrant ** debitGrants;
	event void createDebitGrant(AccountPx receiver, LimitType limit) throws GrantAlreadyGivenException;
	void checkGrantGiven(AccountPx acc) throws GrantAlreadyGivenException;
	event void remove(AccountPx acc);
}

class Money {
	skip-view prior Amount amount;
	skip-view prior Currency currency;
	Money add(Money money);
	Money subtract(Money money) throws LimitViolatedException;
	Money multiply (Fraction factor);
	BooleanValue greater(Money money);
	BooleanValue greaterOrEqual(Money money);
	BooleanValue equalsValue(Money money);
}

class Amount {
	prior Fraction balance;
	Amount add(Amount a);
	Amount subtract(Amount a);
}

class LimitAccount {
	no-view LimitType minLimit;
	no-view LimitType maxLimit;
	void changeMaxLimit(Money money) throws MaxLimitLowerThenMinLimitException;
	void changeMinLimit(Money money) throws MinLimitHigherMaxLimitException;
	void checkLimit(Money money) throws LimitViolatedException;
}

abstract class BooleanValue(TrueValue,FalseValue){
	extern boolean isTrue();
	BooleanValue or(BooleanValue value);
	BooleanValue and(BooleanValue value);
}

abstract string-factory class LimitType(NoLimit@@Unbegrenzt) {
	void checkMaxLimit(Money money) throws LimitViolatedException;
}
class Limit@@Begrenzt extends LimitType{
	prior skip-view Money money;
}

string-factory abstract class TransactionFee{}

class MixedFee@@gemischte_Gebühren extends TransactionFee{
	prior FixTransactionFee fix;
	prior ProcentualFee procentual;
	prior Money limit;
}
class ProcentualFee@@prozentuale_Gebühren extends TransactionFee{
	prior no-view Percent percent;
}
class FixTransactionFee@@fixe_Gebühren extends TransactionFee {
	prior no-view Money value;
}

class InternalFee {
 	prior no-view Percent percent;
}
class Percent {
	prior Fraction value;
	void changeValue(Fraction value) throws NoValidPercentValueException;
}

string-factory abstract class Currency (Euro, Dollar, Yen, Pfund, Franken){}

string-factory abstract class DebitTransferTransaction##DebiTrfTran {
	active event DebitTransferTransaction execute()  throws ExecuteException;
	Timestamp timestamp@@Zeitstempel;
	String subject@@Betreff;
	no-view	Account sender;
	one-to-one (no-view debitTransfer) DebitTransferState state;
	DebitTransferTransaction copy();
	event DebitTransferDoubleState changeState(DebitTransferState newState);
}

string-factory abstract class DebitTransfer extends DebitTransferTransaction{
	Integer receiverAccountNumber##recaccno@@Empfänger_Konto;
	Integer receiverBankNumber@@Empfänger_Bank;	
	no-view Money money@@Betrag;
	TriggerValue invokerTrigger;
	DebitTransferTransaction ** nextDebitTransferTransactionstriggers##nxtdtttrg;
	DebitTransfer previousDebitTransfer##prvdebtra;
	abstract Money fetchRealMoney();
  event void changeReceiverBank(Integer receiverBankNumber);
	event void changeReceiverAccount(Integer receiverAccountNumber);
	event void changeMoney(Fraction newAmount);
	event void changeCurrency(Currency currency);
	BooleanValue contains(Trigger trigger);
}

class Transfer@@Überweisung extends DebitTransfer {

}
class Debit@@Lastschrift extends DebitTransfer {}

class Transaction@@Transaktion extends DebitTransferTransaction {
	skip-view DebitTransferListe debitTransfer;
	void addToTransaction(DebitTransfer ** debitTransfer);
	void removeFromTransaction(DebitTransfer ** debitTransfer);
	BooleanValue contains(DebitTransferTransaction debitTransfer);
}

class DebitTransferListe##DebTransLst {
	DebitTransfer ** debitTransfers;
}

class DebitGrant {
	prior AccountPx permittedAccount;
	prior LimitType limits;
}

abstract class TriggerValue {
	abstract TriggerValue copy();
}

class NoTrigger extends TriggerValue{}

class Trigger extends TriggerValue{
	prior String name@@Name;
	one-to-one (no-view master) TriggerState state;
	DebitTransferTransaction action;
	one-to-one (masterTrigger) Rule ** rules;
	void enable() throws NoRuleDefinitionException;
	void disable();
	void addRule(Rule rule) throws DoubleRuleDefinitionException;
	void executeTrigger(DebitTransfer incomingDebitTransfer, AccountService accService) throws ExecuteException;
	BooleanValue isEnabled();
}

abstract class TriggerState (EnabledState, DisabledState) {}

string-factory abstract class Rule{
	BooleanValue check(DebitTransfer debitTransfer);
}

class MoneyRule@@Geldregel extends Rule{
	no-view prior Currency currency;
	skip-view Amount minLimit;
	skip-view Amount maxLimit;
	void changeMin(Fraction minValue@@Min_Betrag);
	void changeMax(Fraction maxValue@@Max_Betrag);
	BooleanValue checkMin(Fraction minValue);
	BooleanValue checkMax(Fraction maxValue);
}

class SubjectRule@@Betreffregel extends Rule{
	String subject@@Betreff;
	void changeSubject(String subject);
}

class IncomingAccountRule##IncAccRule@@Absenderregel extends Rule{
	Integer accountNumber@@Kontonummer;
	Integer bankNumber@@BLZ;
	void changeAccountNumber(Integer accNum@@Kontonummer);
	void changeBankNumber(Integer bankNum@@BLZ);
}


class Compensation {
	prior Account requestingAccount;
  observe CompensationRequest ** pendingRequests;
	one-to-one (no-view debitTransfer) StornoState stornoState;

	void initializeDebitTransferTransaction(DebitTransferTransaction dtt);
	void requestCompensationForDebitTransfers(DebitTransfer ** debitTransfers);
	void requestCompensationForDebitTransfer(DebitTransfer debitTransfers);

	active void executeCompensation();
	BooleanValue allAnswered() throws CompensationAbortedException;
}

class CompensationRequest {
	prior DebitTransferTransaction debitTransferTransaction##cmpstDtTr;
	prior Compensation masterCompensation;
	CompensationRequestState state;
	event void changeState(CompensationRequestState a);
}


abstract class CompensationRequestState##CmpReqSt(WaitingState, AcceptedState, DeclinedState) {}



class DebitTransferDoubleState##DebTraStaDo {
	prior DebitTransferState debitTransferStateOld##dbtrstold;
	prior DebitTransferState debitTransferStateNew##dbtrstNew;
}

abstract class DebitTransferState##DebiTraStat{
	BooleanValue isExecutable();
	BooleanValue isTransaction();
	void changeState(DebitTransferState newState);
	void removeDebitTransferFromList();
	void addDebitTransferFromList(DebitTransferState state);
}

class SuccessfulState extends DebitTransferState {}
class NotSuccessfulState##NotSucState extends DebitTransferState {}
class TemplateState extends DebitTransferState {}
class ExecutedState extends DebitTransferState {}
class NotExecutedState extends DebitTransferState {}
class NotExecutableState extends DebitTransferState {}

abstract class StornoState(SuccessfulStornoState##SucStoSta,NotSuccessfulStornoState##NoSucStoSta,RequestState,NoRequestState){}

exception PasswordException {}
exception InvalidBankNumberException extends ExecuteException{}
exception InvalidAccountNumberException extends ExecuteException{}
exception LimitViolatedException extends DebitException{}
exception NoPermissionToExecuteDebitTransferException extends ExecuteException{}
exception CloseAccountNoPossibleException{}
exception NoAccountsFound{}
exception GrantAlreadyGivenException{}
exception DebitNotGrantedException extends DebitException{}
exception RuleNotMatchedException {}
exception DoubleRuleDefinitionException {}
exception NoRuleDefinitionException {}
exception MinLimitHigherMaxLimitException{}
exception MaxLimitLowerThenMinLimitException{}
exception NoValidPercentValueException{}
exception NoValidFeeValueException{}

exception TriggerCyclicException extends ExecuteException{}
abstract exception DebitException extends ExecuteException{}
abstract exception ExecuteException{}

exception CompensationAbortedException {prior Compensation compensation;}

}



