model partsList {

server Server {
	Component ** components;
	void clearComponents@@Neuen_Zettel();
	void clearErrors@@Fehler_l√∂sen();
	void importComponent@@Bestehende_Komponente_importieren(String name);
	skip-view derived PartsListManager manager;
	void createComponent@@Neu(String name@@Name_der_neuen_Komponente, ComponentSUBTYPEName componentType@@Typ_der_neuen_Komponente);
	void addComponent(Product product, Component newPart, Integer amount) throws CycleException;
	Integer count@@Anzahl_der_enthaltenen_Komponenten(Component component);
	Materiallist fetchMateriallist@@Materialliste_anzeigen(Component component);
	void refreshView@@Aktualisieren();
}


singleton PartsListManager {
	active Component createComponent(String name, ComponentSUBTYPEName componentType) throws DoubleDefinitionException;
	active void addComponent(Product product, Component newPart, Integer amount) throws CycleException;
	Integer count(Component component);
	Materiallist fetchMateriallist(Component component);
}

class Materiallist {
	MateriallistValue ** values;
	Materiallist add(Material material, Integer amount);
	Materiallist addAll(Materiallist list);
	Materiallist multiply(Integer factor);
}

class MateriallistValue {
	prior skip-view Material material;
	prior Integer amount;
}


hierarchy ComponentHierarchy;

string-factory abstract class Component {
	prior indexed String name;
	no-view one-to-one(master) State currentState;
	Materiallist createMateriallist();
	Materiallist fetchMateriallist();
}

class Material extends Component {}

class Product@@Produkt extends Component {
	one-to-one(no-view master) QPart ** parts hierarchy ComponentHierarchy;
	void addComponent(Component newComponent, Integer amount) throws CycleException;
	void notifyChangedMateriallist();
}

class QPart {
	prior Integer amount;
	prior no-view symmetric(no-view partOf) Component component hierarchy ComponentHierarchy;
}

abstract class State {
	Materiallist fetchMateriallist();
}
class NotCached extends State { }
class Cached extends State {
	prior Materiallist cachedList;
}

exception DoubleDefinitionException {}

}
